/* tslint:disable */
/* eslint-disable */
/**
 * EPYC API
 * epyc API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import * as Express from 'express';

import {
    FramePlayData,
    FramePlayDataFromJSON,
    FramePlayDataToJSON,
    FramePlayTitleRequest,
    FramePlayTitleRequestFromJSON,
    FramePlayTitleRequestToJSON,
    Game,
    GameFromJSON,
    GameToJSON,
} from '../models';

export interface GetFramePlayDataParams {
     gameName: string;
     frameId: string;
}
export interface GetGameParams {
     gameName: string;
}
export interface PutFrameImageParams {
     gameName: string;
     frameId: string;
     body: Blob;
}
export interface PutFrameTitleParams {
     gameName: string;
     frameId: string;
     framePlayTitleRequest: FramePlayTitleRequest;
}


export interface EpycApi {

    /**
     */
    getFramePlayData(params: GetFramePlayDataParams, context: runtime.Context): Promise<FramePlayData>;

    /**
     */
    getGame(params: GetGameParams, context: runtime.Context): Promise<Game>;

    /**
     */
    getGames(context: runtime.Context): Promise<Array<Game>>;

    /**
     */
    putFrameImage(params: PutFrameImageParams, context: runtime.Context): Promise<void>;

    /**
     */
    putFrameTitle(params: PutFrameTitleParams, context: runtime.Context): Promise<void>;

    
}


/**
 * no description
 */
export class EpycApiRouter {

    router = Express.Router()
    api: EpycApi
    cfg: runtime.Configuration

    constructor(api: EpycApi, cfg: runtime.Configuration) {
        this.api = api;
        this.cfg = cfg;

        this.router.get('/games/{gameName}/frame/{frameId}/playData'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.getFramePlayData(req, res);
            }
            catch (e) {
                console.log(`Error occurred in getFramePlayData: ${e}`)
                if (e.stack) {
                    console.log(e.stack);
                }
                if (e.statusCode) {
                    res.status(e.statusCode).send(e.message);
                }
                else {
                    res.status(500).send(e.message);
                }
            }
        });
        this.router.get('/games/{gameName}'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.getGame(req, res);
            }
            catch (e) {
                console.log(`Error occurred in getGame: ${e}`)
                if (e.stack) {
                    console.log(e.stack);
                }
                if (e.statusCode) {
                    res.status(e.statusCode).send(e.message);
                }
                else {
                    res.status(500).send(e.message);
                }
            }
        });
        this.router.get('/games'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.getGames(req, res);
            }
            catch (e) {
                console.log(`Error occurred in getGames: ${e}`)
                if (e.stack) {
                    console.log(e.stack);
                }
                if (e.statusCode) {
                    res.status(e.statusCode).send(e.message);
                }
                else {
                    res.status(500).send(e.message);
                }
            }
        });
        this.router.put('/games/{gameName}/frame/{frameId}/image'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.putFrameImage(req, res);
            }
            catch (e) {
                console.log(`Error occurred in putFrameImage: ${e}`)
                if (e.stack) {
                    console.log(e.stack);
                }
                if (e.statusCode) {
                    res.status(e.statusCode).send(e.message);
                }
                else {
                    res.status(500).send(e.message);
                }
            }
        });
        this.router.put('/games/{gameName}/frame/{frameId}/title'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.putFrameTitle(req, res);
            }
            catch (e) {
                console.log(`Error occurred in putFrameTitle: ${e}`)
                if (e.stack) {
                    console.log(e.stack);
                }
                if (e.statusCode) {
                    res.status(e.statusCode).send(e.message);
                }
                else {
                    res.status(500).send(e.message);
                }
            }
        });
    }

    async getFramePlayData(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};




        let gameName = req.params.gameName
        let frameId = req.params.frameId



        let params: GetFramePlayDataParams = {
            gameName,
            frameId,
        }

        const response = await this.api.getFramePlayData(params, context);


        res.json(response);

    }
    async getGame(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};




        let gameName = req.params.gameName



        let params: GetGameParams = {
            gameName,
        }

        const response = await this.api.getGame(params, context);


        res.json(response);

    }
    async getGames(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};








        const response = await this.api.getGames(context);

        res.json(response);

    }
    async putFrameImage(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};




        let gameName = req.params.gameName
        let frameId = req.params.frameId

        let body = req.body


        let params: PutFrameImageParams = {
            gameName,
            frameId,
            body,
        }

        const response = await this.api.putFrameImage(params, context);


        res.sendStatus(200);

    }
    async putFrameTitle(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};




        let gameName = req.params.gameName
        let frameId = req.params.frameId

        let framePlayTitleRequest = FramePlayTitleRequestFromJSON(req.body)


        let params: PutFrameTitleParams = {
            gameName,
            frameId,
            framePlayTitleRequest,
        }

        const response = await this.api.putFrameTitle(params, context);


        res.sendStatus(200);

    }
}
